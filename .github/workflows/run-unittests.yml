name: Unit Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'release/**'
      - develop
    paths:
      - '!docs/**'

  pull_request:

# Cancel in progress workflows on pull_requests.
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 90

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        test-folder:

    steps:
      - uses: actions/checkout@v3

      # Caching python libraries installed with pip
      # https://github.com/actions/cache/blob/main/examples.md#python---pip
#      - uses: actions/cache@v3
#        with:
#          path: ~/.cache/pip
#          key: ${{ runner.os }}-pip-${{ hashFiles('**/test-requirements.txt') }}
#          restore-keys: |
#            ${{ runner.os }}-pip-
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Test config setup"
        shell: bash
        env:
          ADS_OCI_CONFIG_REALLIKE: ${{ secrets.ADS_OCI_CONFIG_REALLIKE }}
          ADS_OCI_PRIVATE_KEY_REALLIKE: ${{ secrets.ADS_OCI_PRIVATE_KEY_REALLIKE }}
        run: |
          set -x # print commands that are executed
          mkdir -p /home/runner/.oci
          ls -lha
          echo "$ADS_OCI_CONFIG_REALLIKE" > "/home/runner/.oci/config"
          echo "$ADS_OCI_PRIVATE_KEY_REALLIKE" > "/home/runner/.oci/oci_ads_user.pem"
          echo "key_file=/home/runner/.oci/oci_ads_user.pem" >> "/home/runner/.oci/config"

      - name: "Run default_setup tests folder ONLY with minimum ADS dependencies"
        timeout-minutes: 90
        shell: bash
        env:
          NB_SESSION_COMPARTMENT_OCID: ocid1.compartment.oc1.<unique_ocid>
          NoDependency: True
        run: |
          set -x # print commands that are executed
          $CONDA/bin/conda init
          source /home/runner/.bashrc
          pip install -r test-requirements.txt
          python -m pytest -v -p no:warnings --durations=5 tests/unitary/default_setup \
          --deselect=tests/unitary/default_setup/model/test_artifact_uploader.py::TestArtifactUploader::test_upload_small_artifact

      - name: "Run unitary tests folder with maximum ADS dependencies"
        timeout-minutes: 90
        shell: bash
        env:
          NB_SESSION_COMPARTMENT_OCID: ocid1.compartment.oc1.<unique_ocid>
          CONDA_PREFIX: /usr/share/miniconda
        run: |
          set -x # print commands that are executed
          sudo apt-get install libkrb5-dev graphviz
          $CONDA/bin/conda init
          source /home/runner/.bashrc
          pip install setuptools
          pip install -r dev-requirements.txt
          python -m pytest -v -p no:warnings --durations=5 tests/unitary
          --cov --cov-report=html

#       Uploading test artifacts
#       https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts#uploading-build-and-test-artifacts
      - name: "Save html coverage report"
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: htmlcov/
          retention-days: 10
